<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Proxy List - MAZLANA CF</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #f9f9f9;
      color: #333;
    }

    .sidebar {
      height: 100%;
      width: 240px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #222;
      padding-top: 20px;
      transition: 0.3s;
      overflow-x: hidden;
    }
    .sidebar.closed { width: 0; padding: 0; }

    .logo { display: flex; justify-content: center; margin-bottom: 20px; }
    .logo img { width: 100px; border-radius: 50%; border: 2px solid #fff; }
    .sidebar h2 { color: #fff; text-align: center; margin-bottom: 20px; font-size: 18px; }
    .sidebar a {
      padding: 12px 20px;
      text-decoration: none;
      font-size: 16px;
      color: #bbb;
      display: block;
      transition: 0.3s;
    }
    .sidebar a:hover { background-color: #575757; color: #fff; }

    .content { margin-left: 260px; padding: 20px; transition: 0.3s; }
    .collapsed .content { margin-left: 20px; }

    h1 { text-align: center; margin-bottom: 10px; font-size: 28px; color: #222; }
    h2 { margin-top: 30px; color: #444; }

    table { width: 100%; border-collapse: collapse; margin-top: 10px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
    th { background: #333; color: #fff; }
    tr:nth-child(even) { background: #f2f2f2; }

    .filter { text-align: center; margin: 20px 0; }
    select { padding: 8px 12px; font-size: 16px; }
    button {
      padding: 5px 10px;
      border: none;
      background: #222;
      color: #fff;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover { background: #444; }

    .footer { margin-top: 40px; text-align: center; font-size: 13px; color: #666; }

    .toggle-btn {
      position: fixed;
      top: 15px;
      left: 15px;
      background: #222;
      color: #fff;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      font-size: 16px;
      border-radius: 4px;
      z-index: 1000;
    }

    /* Modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 2000;
      padding-top: 100px;
      left: 0; top: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
    }
    .modal-content {
      background: white;
      margin: auto;
      padding: 20px;
      border-radius: 8px;
      width: 350px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      animation: fadeIn 0.3s;
    }
    .close { float: right; font-size: 22px; font-weight: bold; cursor: pointer; }
    .close:hover { color: red; }
    @keyframes fadeIn { from {opacity:0} to {opacity:1} }

    /* Pagination */
    .pagination { margin-top: 15px; text-align: center; }
    .pagination button {
      margin: 0 3px;
      padding: 6px 10px;
      border: 1px solid #ccc;
      background: #fff;
      cursor: pointer;
      border-radius: 4px;
    }
    .pagination button.active {
      background: #333;
      color: #fff;
      font-weight: bold;
    }
    .pagination span { margin: 0 5px; color: #666; font-size: 14px; }
  </style>
</head>
<body>
  <button class="toggle-btn" onclick="toggleSidebar()">‚ò∞</button>
  <div class="sidebar" id="sidebar">
    <div class="logo">
      <img src="https://avatars.githubusercontent.com/u/9919?s=200&v=4" alt="Logo" />
    </div>
    <h2>Navigation</h2>
    <a href="/">üè† Home</a>
    <a href="/sub">üåê Proxy List</a>
    <a href="/tools">üõ†Ô∏è Tools</a>
    <a href="/about">‚ÑπÔ∏è About</a>
  </div>

  <div class="content" id="content">
    <h1>üî• MAZLANA CF üî•</h1>
    <div class="filter">
      <label for="countryFilter">Filter by Country: </label>
      <select id="countryFilter">
        <option value="all">All Countries</option>
      </select>
    </div>
    <div id="proxyContainer"></div>
    <div class="footer">Generated by Cloudflare Worker</div>
  </div>

  <!-- Modal -->
  <div id="proxyModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h1>Proxy Info</h1>
      <p><b>IP:</b> <span id="modal-ip"></span></p>
      <p><b>Port:</b> <span id="modal-port"></span></p>
      <p><b>Organization:</b> <span id="modal-org"></span></p>
      <p><b>Ping:</b> <span id="modal-ping">Testing...</span></p>
    </div>
  </div>

  <script>
    let allProxies = [];
    let currentPage = 1;
    const pageSize = 15;

    function toggleSidebar() {
      document.getElementById("sidebar").classList.toggle("closed");
      document.body.classList.toggle("collapsed");
    }

    async function updatePing(prxIP, prxPort, elId) {
      try {
        const start = Date.now();
        const res = await fetch(`/check?target=${prxIP}:${prxPort}`);
        const data = await res.json();
        const elapsed = Date.now() - start;

        if (data && data.status === "ok") {
          document.getElementById(elId).textContent = elapsed + " ms";
        } else {
          document.getElementById(elId).textContent = "Fail";
        }
      } catch (e) {
        document.getElementById(elId).textContent = "Fail";
      }
    }

    function renderTable(proxies) {
      const container = document.getElementById("proxyContainer");
      container.innerHTML = "";

      const start = (currentPage - 1) * pageSize;
      const end = start + pageSize;
      const pageData = proxies.slice(start, end);

      const table = document.createElement("table");
      table.innerHTML = `
        <tr><th>IP</th><th>Port</th><th>ORG</th><th>Country</th><th>Ping</th><th>Action</th></tr>
        ${pageData
          .map(
            (p, i) => `
            <tr id="row-${i}">
              <td>${p.prxIP}</td>
              <td>${p.prxPort}</td>
              <td>${p.org}</td>
              <td>${p.country}</td>
              <td id="ping-${i}">Loading...</td>
              <td><button onclick="openProxy('${p.prxIP}','${p.prxPort}','${p.org}')">Open</button></td>
            </tr>`
          )
          .join("")}
      `;
      container.appendChild(table);

      pageData.forEach((p, i) => {
        updatePing(p.prxIP, p.prxPort, `ping-${i}`);
      });

      renderPagination(proxies.length);
    }

    function renderPagination(totalItems) {
      const container = document.getElementById("proxyContainer");
      const totalPages = Math.ceil(totalItems / pageSize);
      if (totalPages <= 1) return;

      const nav = document.createElement("div");
      nav.className = "pagination";

      if (currentPage > 1) {
        const prev = document.createElement("button");
        prev.textContent = "Previous";
        prev.onclick = () => { currentPage--; renderTable(allProxies); };
        nav.appendChild(prev);
      }

      const maxVisible = 3;
      let addedLeftDots = false;
      let addedRightDots = false;

      for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - maxVisible && i <= currentPage + maxVisible)) {
          const btn = document.createElement("button");
          btn.textContent = i;
          if (i === currentPage) btn.classList.add("active");
          btn.onclick = () => { currentPage = i; renderTable(allProxies); };
          nav.appendChild(btn);
        } else if (i < currentPage && !addedLeftDots) {
          const span = document.createElement("span");
          span.textContent = "...";
          nav.appendChild(span);
          addedLeftDots = true;
        } else if (i > currentPage && !addedRightDots) {
          const span = document.createElement("span");
          span.textContent = "...";
          nav.appendChild(span);
          addedRightDots = true;
        }
      }

      if (currentPage < totalPages) {
        const next = document.createElement("button");
        next.textContent = "Next";
        next.onclick = () => { currentPage++; renderTable(allProxies); };
        nav.appendChild(next);
      }

      container.appendChild(nav);
    }

    async function loadProxies() {
      const res = await fetch("/api/v1/sub?format=json");
      const data = await res.json();

      allProxies = data;

      const grouped = {};
      data.forEach((prx) => {
        if (!grouped[prx.country]) grouped[prx.country] = [];
        grouped[prx.country].push(prx);
      });

      const select = document.getElementById("countryFilter");
      Object.keys(grouped).forEach((c) => {
        const opt = document.createElement("option");
        opt.value = c;
        opt.textContent = c;
        select.appendChild(opt);
      });

      renderTable(allProxies);

      select.addEventListener("change", () => {
        const selected = select.value;
        if (selected === "all") {
          allProxies = data;
        } else {
          allProxies = grouped[selected] || [];
        }
        currentPage = 1;
        renderTable(allProxies);
      });
    }

    function openProxy(ip, port, org) {
      const modal = document.getElementById("proxyModal");
      modal.style.display = "block";
      document.getElementById("modal-ip").textContent = ip;
      document.getElementById("modal-port").textContent = port;
      document.getElementById("modal-org").textContent = org;
      document.getElementById("modal-ping").textContent = "Testing...";

      (async () => {
        const start = Date.now();
        try {
          const res = await fetch(`/check?target=${ip}:${port}`);
          const data = await res.json();
          const elapsed = Date.now() - start;
          document.getElementById("modal-ping").textContent = elapsed + " ms";
        } catch {
          document.getElementById("modal-ping").textContent = "Timeout";
        }
      })();
    }

    function closeModal() {
      document.getElementById("proxyModal").style.display = "none";
    }

    window.onload = loadProxies;
  </script>
</body>
</html>
